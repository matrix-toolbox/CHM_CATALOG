% 20110228
% Ada Chan
% http://chaos.if.uj.edu.pl/~karol/hadamard/
% https://github.com/matrix-toolbox/

% >> SIGMA = 1 % 2 3 ... 8
% >> H = A15_0_SIGMA(SIGMA)
% >> abs(H .* H'), norm(H * H' - 15 * eye(15), 'fro')

function H = A15_0_SIGMA(SIGMA)

    A1 = [
        0 1 1 1 0 0 0 0 0 0 1 0 0 0 0; % Petersen adjacency matrices
        1 0 0 0 0 0 0 1 0 0 1 0 1 0 0;
        1 0 0 1 0 1 0 0 1 0 0 0 0 0 0;
        1 0 1 0 1 0 0 0 0 0 0 0 0 1 0;
        0 0 0 1 0 0 1 0 0 1 0 0 0 1 0;
        0 0 1 0 0 0 0 0 1 0 0 1 0 0 1;
        0 0 0 0 1 0 0 1 1 1 0 0 0 0 0;
        0 1 0 0 0 0 1 0 1 0 0 0 1 0 0;
        0 0 1 0 0 1 1 1 0 0 0 0 0 0 0;
        0 0 0 0 1 0 1 0 0 0 1 1 0 0 0;
        1 1 0 0 0 0 0 0 0 1 0 1 0 0 0;
        0 0 0 0 0 1 0 0 0 1 1 0 0 0 1;
        0 1 0 0 0 0 0 1 0 0 0 0 0 1 1;
        0 0 0 1 1 0 0 0 0 0 0 0 1 0 1;
        0 0 0 0 0 1 0 0 0 0 0 1 1 1 0;
    ];

    A2 = [
        0 0 0 0 1 1 0 1 1 1 0 1 1 1 0;
        0 0 1 1 0 0 1 0 1 1 0 1 0 1 1;
        0 1 0 0 1 0 1 1 0 0 1 1 0 1 1;
        0 1 0 0 0 1 1 0 1 1 1 0 1 0 1;
        1 0 1 0 0 0 0 1 1 0 1 1 1 0 1;
        1 0 0 1 0 0 1 1 0 1 1 0 1 1 0;
        0 1 1 1 0 1 0 0 0 0 1 1 1 1 0;
        1 0 1 0 1 1 0 0 0 1 1 0 0 1 1;
        1 1 0 1 1 0 0 0 0 1 0 1 1 0 1;
        1 1 0 1 0 1 0 1 1 0 0 0 0 1 1;
        0 0 1 1 1 1 1 1 0 0 0 0 1 0 1;
        1 1 1 0 1 0 1 0 1 0 0 0 1 1 0;
        1 0 0 1 1 1 1 0 1 0 1 1 0 0 0;
        1 1 1 0 0 1 1 1 0 1 0 1 0 0 0;
        0 1 1 1 1 0 0 1 1 1 1 0 0 0 0;
    ];

    A3 = [
        0 0 0 0 0 0 1 0 0 0 0 0 0 0 1;
        0 0 0 0 1 1 0 0 0 0 0 0 0 0 0;
        0 0 0 0 0 0 0 0 0 1 0 0 1 0 0;
        0 0 0 0 0 0 0 1 0 0 0 1 0 0 0;
        0 1 0 0 0 1 0 0 0 0 0 0 0 0 0;
        0 1 0 0 1 0 0 0 0 0 0 0 0 0 0;
        1 0 0 0 0 0 0 0 0 0 0 0 0 0 1;
        0 0 0 1 0 0 0 0 0 0 0 1 0 0 0;
        0 0 0 0 0 0 0 0 0 0 1 0 0 1 0;
        0 0 1 0 0 0 0 0 0 0 0 0 1 0 0;
        0 0 0 0 0 0 0 0 1 0 0 0 0 1 0;
        0 0 0 1 0 0 0 1 0 0 0 0 0 0 0;
        0 0 1 0 0 0 0 0 0 1 0 0 0 0 0;
        0 0 0 0 0 0 0 0 1 0 1 0 0 0 0;
        1 0 0 0 0 0 1 0 0 0 0 0 0 0 0;
    ];

    v_0_0 = [1 2 3]; % test vector

    v_1_1 = [1, (-7 + sqrt(-15)) / 8, 1];
    v_1_2 = [1, (-7 - sqrt(-15)) / 8, 1];

    % PAIR-WISE ONLY: ++ AND --
    v_2_1 = [(5 + sqrt(-11)) / 6, -1, (5 + sqrt(-11)) / 6];
    v_2_4 = [(5 - sqrt(-11)) / 6, -1, (5 - sqrt(-11)) / 6];

    % CROSS-WISE ONLY: +- AND -+
    v_3_2 = [(-1 + sqrt(-15)) / 4, (-1 - sqrt(-15)) / 4, 1];
    v_3_3 = [(-1 - sqrt(-15)) / 4, (-1 + sqrt(-15)) / 4, 1];

    CAPITAL_Z = (53 - 3 * sqrt(201)) / 10.0;

    z_1 = (0.05) * (53 - 3 * sqrt(201) - i * sqrt(6 * (53 * sqrt(201) - 703)));
    z_2 = (0.05) * (53 - 3 * sqrt(201) + i * sqrt(6 * (53 * sqrt(201) - 703)));

    x_1 = ((-5 * CAPITAL_Z + 31) * z_1 - 25 * CAPITAL_Z + 155) / 144;
    x_2 = ((-5 * CAPITAL_Z + 31) * z_2 - 25 * CAPITAL_Z + 155) / 144;

    y_1 = ((25 * CAPITAL_Z - 155) * z_1 + 5 * CAPITAL_Z - 31)/144;
    y_2 = ((25 * CAPITAL_Z - 155) * z_2 + 5 * CAPITAL_Z - 31)/144;

    % disp('unity check');
    % disp(['modulus of x_1 = ', num2str(abs(x_1))]);
    % disp(['modulus of x_2 = ', num2str(abs(x_2))]);
    % disp(['modulus of y_1 = ', num2str(abs(y_1))]);
    % disp(['modulus of y_2 = ', num2str(abs(y_2))]);
    % disp(['modulus of z_1 = ', num2str(abs(z_1))]);
    % disp(['modulus of z_2 = ', num2str(abs(z_2))]);

    H_1_1 = eye(15) + v_1_1(1) * A1 + v_1_1(2) * A2 + v_1_1(3) * A3;
    H_1_2 = eye(15) + v_1_2(1) * A1 + v_1_2(2) * A2 + v_1_2(3) * A3;
    % abs(H_1_1 * H_1_1')
    % abs(H_1_2 * H_1_2')

    H_2_1 = eye(15) + v_2_1(1) * A1 + v_2_1(2) * A2 + v_2_1(3) * A3;
    H_2_4 = eye(15) + v_2_4(1) * A1 + v_2_4(2) * A2 + v_2_4(3) * A3;
    % abs(H_2_1 * H_2_1')
    % abs(H_2_4 * H_2_4')

    H_3_2 = eye(15) + v_3_2(1) * A1 + v_3_2(2) * A2 + v_3_2(3) * A3;
    H_3_3 = eye(15) + v_3_3(1) * A1 + v_3_3(2) * A2 + v_3_3(3) * A3;
    % abs(H_3_2 * H_3_2')
    % abs(H_3_3 * H_3_3')

    H_4_1 = eye(15) + x_1 * A1 + y_1 * A2 + z_1 * A3;
    H_4_2 = eye(15) + x_2 * A1 + y_2 * A2 + z_2 * A3;
    % abs(H_4_1 * H_4_1')
    % abs(H_4_2 * H_4_2')

    switch SIGMA
    case 1
        H = H_1_1;
    case 2
        H = H_1_2;
    case 3
        H = H_2_1;
    case 4
        H = H_2_4;
    case 5
        H = H_3_2;
    case 6
        H = H_3_3;
    case 7
        H = H_4_1;
    case 8
        H = H_4_2;
    otherwise
        error('Invalid SIGMA value!. SIGMA = 1 2 ... 8.');
    end

end

